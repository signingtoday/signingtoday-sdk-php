<?php
/**
 * Bit4idPathgroupServicesApiTest
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Signing Today Web
 *
 * *Signing Today* is the perfect Digital Signature Gateway. Whenever in Your workflow You need to add one or more Digital Signatures to Your document, *Signing Today* is the right choice. You prepare Your documents, *Signing Today* takes care of all the rest: send invitations (`signature tickets`) to signers, collects their signatures, send You back the signed document. Integrating *Signing Today* in Your existing applications is very easy. Just follow these API specifications and get inspired by the many examples presented hereafter.
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.2.3
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace OpenAPI\Client;

use \OpenAPI\Client\Configuration;
use \OpenAPI\Client\ApiException;
use \OpenAPI\Client\ObjectSerializer;
use PHPUnit\Framework\TestCase;

/**
 * Bit4idPathgroupServicesApiTest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class Bit4idPathgroupServicesApiTest extends TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass()
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp()
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown()
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass()
    {
    }

    /**
     * Test case for authChangePasswordPost
     *
     * Consume a token to change the password.
     *
     */
    public function testAuthChangePasswordPost()
    {
    }

    /**
     * Test case for authPasswordLostGet
     *
     * Request to recover own password.
     *
     */
    public function testAuthPasswordLostGet()
    {
    }

    /**
     * Test case for authPasswordResetGet
     *
     * Reset a user password with superuser.
     *
     */
    public function testAuthPasswordResetGet()
    {
    }

    /**
     * Test case for authPasswordResetPost
     *
     * Reset your own password.
     *
     */
    public function testAuthPasswordResetPost()
    {
    }

    /**
     * Test case for authPasswordTokenGet
     *
     * Get token to change password.
     *
     */
    public function testAuthPasswordTokenGet()
    {
    }

    /**
     * Test case for authSamlPost
     *
     * Register or Update a SAML user.
     *
     */
    public function testAuthSamlPost()
    {
    }

    /**
     * Test case for authUser
     *
     * Return the current logged in user.
     *
     */
    public function testAuthUser()
    {
    }

    /**
     * Test case for configurationGet
     *
     * Retrieve the App configuration.
     *
     */
    public function testConfigurationGet()
    {
    }

    /**
     * Test case for logoutUser
     *
     * Log out current user terminating the session.
     *
     */
    public function testLogoutUser()
    {
    }

    /**
     * Test case for oauthTokenPost
     *
     * Get the bearer token.
     *
     */
    public function testOauthTokenPost()
    {
    }

    /**
     * Test case for pdfResourceIdThumbsGet
     *
     * Retrieve a Resource (of service).
     *
     */
    public function testPdfResourceIdThumbsGet()
    {
    }

    /**
     * Test case for serviceChangePasswordPost
     *
     * Change the password of a service user.
     *
     */
    public function testServiceChangePasswordPost()
    {
    }

    /**
     * Test case for serviceUsersSyncPost
     *
     * Sync user accounts.
     *
     */
    public function testServiceUsersSyncPost()
    {
    }
}
