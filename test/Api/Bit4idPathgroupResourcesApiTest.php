<?php
/**
 * Bit4idPathgroupResourcesApiTest
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Signing Today Web
 *
 * *Signing Today* is the perfect Digital Signature Gateway. Whenever in Your workflow You need to add one or more Digital Signatures to Your document, *Signing Today* is the right choice. You prepare Your documents, *Signing Today* takes care of all the rest: send invitations (`signature tickets`) to signers, collects their signatures, send You back the signed document. Integrating *Signing Today* in Your existing applications is very easy. Just follow these API specifications and get inspired by the many examples presented hereafter.
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.2.3
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace OpenAPI\Client;

use \OpenAPI\Client\Configuration;
use \OpenAPI\Client\ApiException;
use \OpenAPI\Client\ObjectSerializer;
use PHPUnit\Framework\TestCase;

/**
 * Bit4idPathgroupResourcesApiTest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class Bit4idPathgroupResourcesApiTest extends TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass()
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp()
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown()
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass()
    {
    }

    /**
     * Test case for dSTIdResourcesGet
     *
     * Retrieve all resources associated to a DST.
     *
     */
    public function testDSTIdResourcesGet()
    {
    }

    /**
     * Test case for dSTIdResourcesPatch
     *
     * Append a new resource to a DST.
     *
     */
    public function testDSTIdResourcesPatch()
    {
    }

    /**
     * Test case for dSTResourceIdDelete
     *
     * Delete a Resource.
     *
     */
    public function testDSTResourceIdDelete()
    {
    }

    /**
     * Test case for resourceIdGet
     *
     * Retrieve a Resource.
     *
     */
    public function testResourceIdGet()
    {
    }

    /**
     * Test case for resourceIdPut
     *
     * Update a Resource.
     *
     */
    public function testResourceIdPut()
    {
    }

    /**
     * Test case for userIdIdentityIdentityIdAppearanceDelete
     *
     * Delete a user appearance resource..
     *
     */
    public function testUserIdIdentityIdentityIdAppearanceDelete()
    {
    }

    /**
     * Test case for userIdIdentityIdentityIdAppearanceGet
     *
     * Download an identity appearance resource.
     *
     */
    public function testUserIdIdentityIdentityIdAppearanceGet()
    {
    }

    /**
     * Test case for userIdIdentityIdentityIdAppearancePost
     *
     * Add a graphical appearance to a user's identity.
     *
     */
    public function testUserIdIdentityIdentityIdAppearancePost()
    {
    }
}
