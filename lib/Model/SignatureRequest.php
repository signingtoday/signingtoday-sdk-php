<?php
/**
 * SignatureRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Signing Today Web
 *
 * *Signing Today* is the perfect Digital Signature Gateway. Whenever in Your workflow You need to add one or more Digital Signatures to Your document, *Signing Today* is the right choice. You prepare Your documents, *Signing Today* takes care of all the rest: send invitations (`signature tickets`) to signers, collects their signatures, send You back the signed document. Integrating *Signing Today* in Your existing applications is very easy. Just follow these API specifications and get inspired by the many examples presented hereafter.
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.2.3
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * SignatureRequest Class Doc Comment
 *
 * @category Class
 * @description The association with the document is hold in the extraData of the FillableForm.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class SignatureRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SignatureRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        '_instance_id' => 'int',
        'id' => 'int',
        'reason' => 'string',
        'description' => 'string',
        'signer_id' => 'int',
        'sign_profile' => 'string',
        'with_timestamp' => 'bool',
        'declinable' => 'bool',
        'restrictions' => '\OpenAPI\Client\Model\SignatureRestriction[]',
        'extra_data' => 'map[string,object]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        '_instance_id' => 'int64',
        'id' => 'int32',
        'reason' => null,
        'description' => null,
        'signer_id' => 'int32',
        'sign_profile' => null,
        'with_timestamp' => null,
        'declinable' => null,
        'restrictions' => null,
        'extra_data' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        '_instance_id' => '_instance_id',
        'id' => 'id',
        'reason' => 'reason',
        'description' => 'description',
        'signer_id' => 'signerId',
        'sign_profile' => 'signProfile',
        'with_timestamp' => 'withTimestamp',
        'declinable' => 'declinable',
        'restrictions' => 'restrictions',
        'extra_data' => 'extraData'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        '_instance_id' => 'setInstanceId',
        'id' => 'setId',
        'reason' => 'setReason',
        'description' => 'setDescription',
        'signer_id' => 'setSignerId',
        'sign_profile' => 'setSignProfile',
        'with_timestamp' => 'setWithTimestamp',
        'declinable' => 'setDeclinable',
        'restrictions' => 'setRestrictions',
        'extra_data' => 'setExtraData'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        '_instance_id' => 'getInstanceId',
        'id' => 'getId',
        'reason' => 'getReason',
        'description' => 'getDescription',
        'signer_id' => 'getSignerId',
        'sign_profile' => 'getSignProfile',
        'with_timestamp' => 'getWithTimestamp',
        'declinable' => 'getDeclinable',
        'restrictions' => 'getRestrictions',
        'extra_data' => 'getExtraData'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const SIGN_PROFILE_C_AD_ES = 'CAdES';
    const SIGN_PROFILE_P_AD_ES = 'PAdES';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSignProfileAllowableValues()
    {
        return [
            self::SIGN_PROFILE_C_AD_ES,
            self::SIGN_PROFILE_P_AD_ES,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['_instance_id'] = isset($data['_instance_id']) ? $data['_instance_id'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['reason'] = isset($data['reason']) ? $data['reason'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['signer_id'] = isset($data['signer_id']) ? $data['signer_id'] : null;
        $this->container['sign_profile'] = isset($data['sign_profile']) ? $data['sign_profile'] : null;
        $this->container['with_timestamp'] = isset($data['with_timestamp']) ? $data['with_timestamp'] : null;
        $this->container['declinable'] = isset($data['declinable']) ? $data['declinable'] : null;
        $this->container['restrictions'] = isset($data['restrictions']) ? $data['restrictions'] : null;
        $this->container['extra_data'] = isset($data['extra_data']) ? $data['extra_data'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getSignProfileAllowableValues();
        if (!is_null($this->container['sign_profile']) && !in_array($this->container['sign_profile'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'sign_profile', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets _instance_id
     *
     * @return int|null
     */
    public function getInstanceId()
    {
        return $this->container['_instance_id'];
    }

    /**
     * Sets _instance_id
     *
     * @param int|null $_instance_id It is a reference for internal use
     *
     * @return $this
     */
    public function setInstanceId($_instance_id)
    {
        $this->container['_instance_id'] = $_instance_id;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets reason
     *
     * @return string|null
     */
    public function getReason()
    {
        return $this->container['reason'];
    }

    /**
     * Sets reason
     *
     * @param string|null $reason reason
     *
     * @return $this
     */
    public function setReason($reason)
    {
        $this->container['reason'] = $reason;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets signer_id
     *
     * @return int|null
     */
    public function getSignerId()
    {
        return $this->container['signer_id'];
    }

    /**
     * Sets signer_id
     *
     * @param int|null $signer_id signer_id
     *
     * @return $this
     */
    public function setSignerId($signer_id)
    {
        $this->container['signer_id'] = $signer_id;

        return $this;
    }

    /**
     * Gets sign_profile
     *
     * @return string|null
     */
    public function getSignProfile()
    {
        return $this->container['sign_profile'];
    }

    /**
     * Sets sign_profile
     *
     * @param string|null $sign_profile sign_profile
     *
     * @return $this
     */
    public function setSignProfile($sign_profile)
    {
        $allowedValues = $this->getSignProfileAllowableValues();
        if (!is_null($sign_profile) && !in_array($sign_profile, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'sign_profile', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['sign_profile'] = $sign_profile;

        return $this;
    }

    /**
     * Gets with_timestamp
     *
     * @return bool|null
     */
    public function getWithTimestamp()
    {
        return $this->container['with_timestamp'];
    }

    /**
     * Sets with_timestamp
     *
     * @param bool|null $with_timestamp with_timestamp
     *
     * @return $this
     */
    public function setWithTimestamp($with_timestamp)
    {
        $this->container['with_timestamp'] = $with_timestamp;

        return $this;
    }

    /**
     * Gets declinable
     *
     * @return bool|null
     */
    public function getDeclinable()
    {
        return $this->container['declinable'];
    }

    /**
     * Sets declinable
     *
     * @param bool|null $declinable declinable
     *
     * @return $this
     */
    public function setDeclinable($declinable)
    {
        $this->container['declinable'] = $declinable;

        return $this;
    }

    /**
     * Gets restrictions
     *
     * @return \OpenAPI\Client\Model\SignatureRestriction[]|null
     */
    public function getRestrictions()
    {
        return $this->container['restrictions'];
    }

    /**
     * Sets restrictions
     *
     * @param \OpenAPI\Client\Model\SignatureRestriction[]|null $restrictions restrictions
     *
     * @return $this
     */
    public function setRestrictions($restrictions)
    {
        $this->container['restrictions'] = $restrictions;

        return $this;
    }

    /**
     * Gets extra_data
     *
     * @return map[string,object]|null
     */
    public function getExtraData()
    {
        return $this->container['extra_data'];
    }

    /**
     * Sets extra_data
     *
     * @param map[string,object]|null $extra_data extra_data
     *
     * @return $this
     */
    public function setExtraData($extra_data)
    {
        $this->container['extra_data'] = $extra_data;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


