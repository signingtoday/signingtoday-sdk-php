<?php
/**
 * IdentityProviderDataTokenInfo
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Signing Today Web
 *
 * *Signing Today* is the perfect Digital Signature Gateway. Whenever in Your workflow You need to add one or more Digital Signatures to Your document, *Signing Today* is the right choice. You prepare Your documents, *Signing Today* takes care of all the rest: send invitations (`signature tickets`) to signers, collects their signatures, send You back the signed document. Integrating *Signing Today* in Your existing applications is very easy. Just follow these API specifications and get inspired by the many examples presented hereafter.
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.2.3
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * IdentityProviderDataTokenInfo Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class IdentityProviderDataTokenInfo implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Identity_providerData_tokenInfo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'ul_min_pin_len' => 'float',
        'manufacturer_id' => 'string',
        'ul_free_public_memory' => 'float',
        'serial_number' => 'string',
        'ul_total_public_memory' => 'float',
        'label' => 'string',
        'flags' => 'float',
        'ul_total_private_memory' => 'float',
        'model' => 'string',
        'ul_free_private_memory' => 'float',
        'ul_max_pin_len' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'ul_min_pin_len' => null,
        'manufacturer_id' => null,
        'ul_free_public_memory' => null,
        'serial_number' => null,
        'ul_total_public_memory' => null,
        'label' => null,
        'flags' => null,
        'ul_total_private_memory' => null,
        'model' => null,
        'ul_free_private_memory' => null,
        'ul_max_pin_len' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'ul_min_pin_len' => 'ulMinPinLen',
        'manufacturer_id' => 'manufacturerID',
        'ul_free_public_memory' => 'ulFreePublicMemory',
        'serial_number' => 'serialNumber',
        'ul_total_public_memory' => 'ulTotalPublicMemory',
        'label' => 'label',
        'flags' => 'flags',
        'ul_total_private_memory' => 'ulTotalPrivateMemory',
        'model' => 'model',
        'ul_free_private_memory' => 'ulFreePrivateMemory',
        'ul_max_pin_len' => 'ulMaxPinLen'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'ul_min_pin_len' => 'setUlMinPinLen',
        'manufacturer_id' => 'setManufacturerId',
        'ul_free_public_memory' => 'setUlFreePublicMemory',
        'serial_number' => 'setSerialNumber',
        'ul_total_public_memory' => 'setUlTotalPublicMemory',
        'label' => 'setLabel',
        'flags' => 'setFlags',
        'ul_total_private_memory' => 'setUlTotalPrivateMemory',
        'model' => 'setModel',
        'ul_free_private_memory' => 'setUlFreePrivateMemory',
        'ul_max_pin_len' => 'setUlMaxPinLen'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'ul_min_pin_len' => 'getUlMinPinLen',
        'manufacturer_id' => 'getManufacturerId',
        'ul_free_public_memory' => 'getUlFreePublicMemory',
        'serial_number' => 'getSerialNumber',
        'ul_total_public_memory' => 'getUlTotalPublicMemory',
        'label' => 'getLabel',
        'flags' => 'getFlags',
        'ul_total_private_memory' => 'getUlTotalPrivateMemory',
        'model' => 'getModel',
        'ul_free_private_memory' => 'getUlFreePrivateMemory',
        'ul_max_pin_len' => 'getUlMaxPinLen'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['ul_min_pin_len'] = isset($data['ul_min_pin_len']) ? $data['ul_min_pin_len'] : null;
        $this->container['manufacturer_id'] = isset($data['manufacturer_id']) ? $data['manufacturer_id'] : null;
        $this->container['ul_free_public_memory'] = isset($data['ul_free_public_memory']) ? $data['ul_free_public_memory'] : null;
        $this->container['serial_number'] = isset($data['serial_number']) ? $data['serial_number'] : null;
        $this->container['ul_total_public_memory'] = isset($data['ul_total_public_memory']) ? $data['ul_total_public_memory'] : null;
        $this->container['label'] = isset($data['label']) ? $data['label'] : null;
        $this->container['flags'] = isset($data['flags']) ? $data['flags'] : null;
        $this->container['ul_total_private_memory'] = isset($data['ul_total_private_memory']) ? $data['ul_total_private_memory'] : null;
        $this->container['model'] = isset($data['model']) ? $data['model'] : null;
        $this->container['ul_free_private_memory'] = isset($data['ul_free_private_memory']) ? $data['ul_free_private_memory'] : null;
        $this->container['ul_max_pin_len'] = isset($data['ul_max_pin_len']) ? $data['ul_max_pin_len'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets ul_min_pin_len
     *
     * @return float|null
     */
    public function getUlMinPinLen()
    {
        return $this->container['ul_min_pin_len'];
    }

    /**
     * Sets ul_min_pin_len
     *
     * @param float|null $ul_min_pin_len ul_min_pin_len
     *
     * @return $this
     */
    public function setUlMinPinLen($ul_min_pin_len)
    {
        $this->container['ul_min_pin_len'] = $ul_min_pin_len;

        return $this;
    }

    /**
     * Gets manufacturer_id
     *
     * @return string|null
     */
    public function getManufacturerId()
    {
        return $this->container['manufacturer_id'];
    }

    /**
     * Sets manufacturer_id
     *
     * @param string|null $manufacturer_id manufacturer_id
     *
     * @return $this
     */
    public function setManufacturerId($manufacturer_id)
    {
        $this->container['manufacturer_id'] = $manufacturer_id;

        return $this;
    }

    /**
     * Gets ul_free_public_memory
     *
     * @return float|null
     */
    public function getUlFreePublicMemory()
    {
        return $this->container['ul_free_public_memory'];
    }

    /**
     * Sets ul_free_public_memory
     *
     * @param float|null $ul_free_public_memory ul_free_public_memory
     *
     * @return $this
     */
    public function setUlFreePublicMemory($ul_free_public_memory)
    {
        $this->container['ul_free_public_memory'] = $ul_free_public_memory;

        return $this;
    }

    /**
     * Gets serial_number
     *
     * @return string|null
     */
    public function getSerialNumber()
    {
        return $this->container['serial_number'];
    }

    /**
     * Sets serial_number
     *
     * @param string|null $serial_number serial_number
     *
     * @return $this
     */
    public function setSerialNumber($serial_number)
    {
        $this->container['serial_number'] = $serial_number;

        return $this;
    }

    /**
     * Gets ul_total_public_memory
     *
     * @return float|null
     */
    public function getUlTotalPublicMemory()
    {
        return $this->container['ul_total_public_memory'];
    }

    /**
     * Sets ul_total_public_memory
     *
     * @param float|null $ul_total_public_memory ul_total_public_memory
     *
     * @return $this
     */
    public function setUlTotalPublicMemory($ul_total_public_memory)
    {
        $this->container['ul_total_public_memory'] = $ul_total_public_memory;

        return $this;
    }

    /**
     * Gets label
     *
     * @return string|null
     */
    public function getLabel()
    {
        return $this->container['label'];
    }

    /**
     * Sets label
     *
     * @param string|null $label label
     *
     * @return $this
     */
    public function setLabel($label)
    {
        $this->container['label'] = $label;

        return $this;
    }

    /**
     * Gets flags
     *
     * @return float|null
     */
    public function getFlags()
    {
        return $this->container['flags'];
    }

    /**
     * Sets flags
     *
     * @param float|null $flags flags
     *
     * @return $this
     */
    public function setFlags($flags)
    {
        $this->container['flags'] = $flags;

        return $this;
    }

    /**
     * Gets ul_total_private_memory
     *
     * @return float|null
     */
    public function getUlTotalPrivateMemory()
    {
        return $this->container['ul_total_private_memory'];
    }

    /**
     * Sets ul_total_private_memory
     *
     * @param float|null $ul_total_private_memory ul_total_private_memory
     *
     * @return $this
     */
    public function setUlTotalPrivateMemory($ul_total_private_memory)
    {
        $this->container['ul_total_private_memory'] = $ul_total_private_memory;

        return $this;
    }

    /**
     * Gets model
     *
     * @return string|null
     */
    public function getModel()
    {
        return $this->container['model'];
    }

    /**
     * Sets model
     *
     * @param string|null $model model
     *
     * @return $this
     */
    public function setModel($model)
    {
        $this->container['model'] = $model;

        return $this;
    }

    /**
     * Gets ul_free_private_memory
     *
     * @return float|null
     */
    public function getUlFreePrivateMemory()
    {
        return $this->container['ul_free_private_memory'];
    }

    /**
     * Sets ul_free_private_memory
     *
     * @param float|null $ul_free_private_memory ul_free_private_memory
     *
     * @return $this
     */
    public function setUlFreePrivateMemory($ul_free_private_memory)
    {
        $this->container['ul_free_private_memory'] = $ul_free_private_memory;

        return $this;
    }

    /**
     * Gets ul_max_pin_len
     *
     * @return float|null
     */
    public function getUlMaxPinLen()
    {
        return $this->container['ul_max_pin_len'];
    }

    /**
     * Sets ul_max_pin_len
     *
     * @param float|null $ul_max_pin_len ul_max_pin_len
     *
     * @return $this
     */
    public function setUlMaxPinLen($ul_max_pin_len)
    {
        $this->container['ul_max_pin_len'] = $ul_max_pin_len;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


