<?php
/**
 * InlineObject
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Signing Today Web
 *
 * *Signing Today* is the perfect Digital Signature Gateway. Whenever in Your workflow You need to add one or more Digital Signatures to Your document, *Signing Today* is the right choice. You prepare Your documents, *Signing Today* takes care of all the rest: send invitations (`signature tickets`) to signers, collects their signatures, send You back the signed document. Integrating *Signing Today* in Your existing applications is very easy. Just follow these API specifications and get inspired by the many examples presented hereafter.
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.2.3
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * InlineObject Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class InlineObject implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'InlineObject';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'edu_person_principal_name' => 'string',
        'is_member_of' => 'string[]',
        'given_name' => 'string',
        'surname' => 'string',
        'org_role' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'edu_person_principal_name' => null,
        'is_member_of' => null,
        'given_name' => null,
        'surname' => null,
        'org_role' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'edu_person_principal_name' => 'eduPersonPrincipalName',
        'is_member_of' => 'isMemberOf',
        'given_name' => 'givenName',
        'surname' => 'surname',
        'org_role' => 'orgRole'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'edu_person_principal_name' => 'setEduPersonPrincipalName',
        'is_member_of' => 'setIsMemberOf',
        'given_name' => 'setGivenName',
        'surname' => 'setSurname',
        'org_role' => 'setOrgRole'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'edu_person_principal_name' => 'getEduPersonPrincipalName',
        'is_member_of' => 'getIsMemberOf',
        'given_name' => 'getGivenName',
        'surname' => 'getSurname',
        'org_role' => 'getOrgRole'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const ORG_ROLE_ADMIN = 'admin';
    const ORG_ROLE_INSTRUCTOR = 'instructor';
    const ORG_ROLE_SIGNER = 'signer';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOrgRoleAllowableValues()
    {
        return [
            self::ORG_ROLE_ADMIN,
            self::ORG_ROLE_INSTRUCTOR,
            self::ORG_ROLE_SIGNER,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['edu_person_principal_name'] = isset($data['edu_person_principal_name']) ? $data['edu_person_principal_name'] : null;
        $this->container['is_member_of'] = isset($data['is_member_of']) ? $data['is_member_of'] : null;
        $this->container['given_name'] = isset($data['given_name']) ? $data['given_name'] : null;
        $this->container['surname'] = isset($data['surname']) ? $data['surname'] : null;
        $this->container['org_role'] = isset($data['org_role']) ? $data['org_role'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getOrgRoleAllowableValues();
        if (!is_null($this->container['org_role']) && !in_array($this->container['org_role'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'org_role', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets edu_person_principal_name
     *
     * @return string|null
     */
    public function getEduPersonPrincipalName()
    {
        return $this->container['edu_person_principal_name'];
    }

    /**
     * Sets edu_person_principal_name
     *
     * @param string|null $edu_person_principal_name The username of the account
     *
     * @return $this
     */
    public function setEduPersonPrincipalName($edu_person_principal_name)
    {
        $this->container['edu_person_principal_name'] = $edu_person_principal_name;

        return $this;
    }

    /**
     * Gets is_member_of
     *
     * @return string[]|null
     */
    public function getIsMemberOf()
    {
        return $this->container['is_member_of'];
    }

    /**
     * Sets is_member_of
     *
     * @param string[]|null $is_member_of Memberships of the user
     *
     * @return $this
     */
    public function setIsMemberOf($is_member_of)
    {
        $this->container['is_member_of'] = $is_member_of;

        return $this;
    }

    /**
     * Gets given_name
     *
     * @return string|null
     */
    public function getGivenName()
    {
        return $this->container['given_name'];
    }

    /**
     * Sets given_name
     *
     * @param string|null $given_name First name of the user
     *
     * @return $this
     */
    public function setGivenName($given_name)
    {
        $this->container['given_name'] = $given_name;

        return $this;
    }

    /**
     * Gets surname
     *
     * @return string|null
     */
    public function getSurname()
    {
        return $this->container['surname'];
    }

    /**
     * Sets surname
     *
     * @param string|null $surname Last name of the user
     *
     * @return $this
     */
    public function setSurname($surname)
    {
        $this->container['surname'] = $surname;

        return $this;
    }

    /**
     * Gets org_role
     *
     * @return string|null
     */
    public function getOrgRole()
    {
        return $this->container['org_role'];
    }

    /**
     * Sets org_role
     *
     * @param string|null $org_role The role of the user in the organization
     *
     * @return $this
     */
    public function setOrgRole($org_role)
    {
        $allowedValues = $this->getOrgRoleAllowableValues();
        if (!is_null($org_role) && !in_array($org_role, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'org_role', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['org_role'] = $org_role;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


