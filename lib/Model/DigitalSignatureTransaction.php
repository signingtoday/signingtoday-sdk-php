<?php
/**
 * DigitalSignatureTransaction
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Signing Today Web
 *
 * *Signing Today* is the perfect Digital Signature Gateway. Whenever in Your workflow You need to add one or more Digital Signatures to Your document, *Signing Today* is the right choice. You prepare Your documents, *Signing Today* takes care of all the rest: send invitations (`signature tickets`) to signers, collects their signatures, send You back the signed document. Integrating *Signing Today* in Your existing applications is very easy. Just follow these API specifications and get inspired by the many examples presented hereafter.
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.2.3
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * DigitalSignatureTransaction Class Doc Comment
 *
 * @category Class
 * @description The **Digital Signature Transaction** is the core object at the center of every &#x60;digital signature workflow&#x60; in Signing Today. It is a &#x60;collection&#x60; element and holds every document (to be signed or just attached to the transaction) as well as the signature plan required to fulfill the transaction; how many signatures are required, are there any forms to be filled, appearance, signature sequence, signers... everything starts here.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class DigitalSignatureTransaction implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'DigitalSignatureTransaction';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'domain' => 'string',
        'title' => 'string',
        'replaces' => 'string',
        'replaced_by' => 'string',
        'created_by_user' => 'string',
        'created_at' => '\DateTime',
        'documents' => '\OpenAPI\Client\Model\Document[]',
        'published_at' => '\DateTime',
        'expires_at' => '\DateTime',
        'resources' => '\OpenAPI\Client\Model\LFResource[]',
        'signatures' => '\OpenAPI\Client\Model\Signature[]',
        'status' => 'string',
        'error_message' => 'string',
        'deleted_at' => '\DateTime',
        'tags' => 'string[]',
        'template' => 'bool',
        'public_template' => 'bool',
        'extra_data' => 'map[string,object]',
        'visible_to' => 'string[]',
        'cc_groups' => 'string[]',
        'cc_users' => 'string[]',
        'urgent' => 'bool',
        'updated_at' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'id' => 'uuid',
        'domain' => 'any',
        'title' => 'any',
        'replaces' => 'uuid',
        'replaced_by' => 'uuid',
        'created_by_user' => 'uuid',
        'created_at' => 'date-time',
        'documents' => null,
        'published_at' => 'date-time',
        'expires_at' => 'date-time',
        'resources' => null,
        'signatures' => null,
        'status' => null,
        'error_message' => null,
        'deleted_at' => 'date-time',
        'tags' => null,
        'template' => 'boolean',
        'public_template' => 'boolean',
        'extra_data' => null,
        'visible_to' => 'uuid',
        'cc_groups' => null,
        'cc_users' => 'uuid',
        'urgent' => null,
        'updated_at' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'domain' => 'domain',
        'title' => 'title',
        'replaces' => 'replaces',
        'replaced_by' => 'replacedBy',
        'created_by_user' => 'createdByUser',
        'created_at' => 'createdAt',
        'documents' => 'documents',
        'published_at' => 'publishedAt',
        'expires_at' => 'expiresAt',
        'resources' => 'resources',
        'signatures' => 'signatures',
        'status' => 'status',
        'error_message' => 'errorMessage',
        'deleted_at' => 'deletedAt',
        'tags' => 'tags',
        'template' => 'template',
        'public_template' => 'publicTemplate',
        'extra_data' => 'extraData',
        'visible_to' => 'visibleTo',
        'cc_groups' => 'ccGroups',
        'cc_users' => 'ccUsers',
        'urgent' => 'urgent',
        'updated_at' => 'updatedAt'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'domain' => 'setDomain',
        'title' => 'setTitle',
        'replaces' => 'setReplaces',
        'replaced_by' => 'setReplacedBy',
        'created_by_user' => 'setCreatedByUser',
        'created_at' => 'setCreatedAt',
        'documents' => 'setDocuments',
        'published_at' => 'setPublishedAt',
        'expires_at' => 'setExpiresAt',
        'resources' => 'setResources',
        'signatures' => 'setSignatures',
        'status' => 'setStatus',
        'error_message' => 'setErrorMessage',
        'deleted_at' => 'setDeletedAt',
        'tags' => 'setTags',
        'template' => 'setTemplate',
        'public_template' => 'setPublicTemplate',
        'extra_data' => 'setExtraData',
        'visible_to' => 'setVisibleTo',
        'cc_groups' => 'setCcGroups',
        'cc_users' => 'setCcUsers',
        'urgent' => 'setUrgent',
        'updated_at' => 'setUpdatedAt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'domain' => 'getDomain',
        'title' => 'getTitle',
        'replaces' => 'getReplaces',
        'replaced_by' => 'getReplacedBy',
        'created_by_user' => 'getCreatedByUser',
        'created_at' => 'getCreatedAt',
        'documents' => 'getDocuments',
        'published_at' => 'getPublishedAt',
        'expires_at' => 'getExpiresAt',
        'resources' => 'getResources',
        'signatures' => 'getSignatures',
        'status' => 'getStatus',
        'error_message' => 'getErrorMessage',
        'deleted_at' => 'getDeletedAt',
        'tags' => 'getTags',
        'template' => 'getTemplate',
        'public_template' => 'getPublicTemplate',
        'extra_data' => 'getExtraData',
        'visible_to' => 'getVisibleTo',
        'cc_groups' => 'getCcGroups',
        'cc_users' => 'getCcUsers',
        'urgent' => 'getUrgent',
        'updated_at' => 'getUpdatedAt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const STATUS_DRAFT = 'draft';
    const STATUS_DOWNLOADING_IN_DRAFT = 'downloadingInDraft';
    const STATUS_DOWNLOADING_IN_PUBLISHED = 'downloadingInPublished';
    const STATUS_PUBLISHED = 'published';
    const STATUS_TO_FILL = 'toFill';
    const STATUS_TO_SIGN = 'toSign';
    const STATUS_EXPIRED = 'expired';
    const STATUS_SIGNED = 'signed';
    const STATUS_REJECTED = 'rejected';
    const STATUS_ERROR = 'error';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_DRAFT,
            self::STATUS_DOWNLOADING_IN_DRAFT,
            self::STATUS_DOWNLOADING_IN_PUBLISHED,
            self::STATUS_PUBLISHED,
            self::STATUS_TO_FILL,
            self::STATUS_TO_SIGN,
            self::STATUS_EXPIRED,
            self::STATUS_SIGNED,
            self::STATUS_REJECTED,
            self::STATUS_ERROR,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['domain'] = isset($data['domain']) ? $data['domain'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['replaces'] = isset($data['replaces']) ? $data['replaces'] : null;
        $this->container['replaced_by'] = isset($data['replaced_by']) ? $data['replaced_by'] : null;
        $this->container['created_by_user'] = isset($data['created_by_user']) ? $data['created_by_user'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['documents'] = isset($data['documents']) ? $data['documents'] : null;
        $this->container['published_at'] = isset($data['published_at']) ? $data['published_at'] : null;
        $this->container['expires_at'] = isset($data['expires_at']) ? $data['expires_at'] : null;
        $this->container['resources'] = isset($data['resources']) ? $data['resources'] : null;
        $this->container['signatures'] = isset($data['signatures']) ? $data['signatures'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['error_message'] = isset($data['error_message']) ? $data['error_message'] : null;
        $this->container['deleted_at'] = isset($data['deleted_at']) ? $data['deleted_at'] : null;
        $this->container['tags'] = isset($data['tags']) ? $data['tags'] : null;
        $this->container['template'] = isset($data['template']) ? $data['template'] : null;
        $this->container['public_template'] = isset($data['public_template']) ? $data['public_template'] : null;
        $this->container['extra_data'] = isset($data['extra_data']) ? $data['extra_data'] : null;
        $this->container['visible_to'] = isset($data['visible_to']) ? $data['visible_to'] : null;
        $this->container['cc_groups'] = isset($data['cc_groups']) ? $data['cc_groups'] : null;
        $this->container['cc_users'] = isset($data['cc_users']) ? $data['cc_users'] : null;
        $this->container['urgent'] = isset($data['urgent']) ? $data['urgent'] : null;
        $this->container['updated_at'] = isset($data['updated_at']) ? $data['updated_at'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id The uuid code that identifies the Digital Signature Transaction
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets domain
     *
     * @return string|null
     */
    public function getDomain()
    {
        return $this->container['domain'];
    }

    /**
     * Sets domain
     *
     * @param string|null $domain The _domain_ is the Organization which a user or a DST belongs
     *
     * @return $this
     */
    public function setDomain($domain)
    {
        $this->container['domain'] = $domain;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string|null
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string|null $title Title of the Digital Signature Transaction
     *
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets replaces
     *
     * @return string|null
     */
    public function getReplaces()
    {
        return $this->container['replaces'];
    }

    /**
     * Sets replaces
     *
     * @param string|null $replaces The _DST_ which this one replaces
     *
     * @return $this
     */
    public function setReplaces($replaces)
    {
        $this->container['replaces'] = $replaces;

        return $this;
    }

    /**
     * Gets replaced_by
     *
     * @return string|null
     */
    public function getReplacedBy()
    {
        return $this->container['replaced_by'];
    }

    /**
     * Sets replaced_by
     *
     * @param string|null $replaced_by The _DST_ which has replaces the current one
     *
     * @return $this
     */
    public function setReplacedBy($replaced_by)
    {
        $this->container['replaced_by'] = $replaced_by;

        return $this;
    }

    /**
     * Gets created_by_user
     *
     * @return string|null
     */
    public function getCreatedByUser()
    {
        return $this->container['created_by_user'];
    }

    /**
     * Sets created_by_user
     *
     * @param string|null $created_by_user The user created the Digital Signature Transaction
     *
     * @return $this
     */
    public function setCreatedByUser($created_by_user)
    {
        $this->container['created_by_user'] = $created_by_user;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime|null $created_at Date of creation of the Digital Signature Transaction
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets documents
     *
     * @return \OpenAPI\Client\Model\Document[]|null
     */
    public function getDocuments()
    {
        return $this->container['documents'];
    }

    /**
     * Sets documents
     *
     * @param \OpenAPI\Client\Model\Document[]|null $documents The _documents_ field is an array containing document objects, where everyone of them is defined as follows
     *
     * @return $this
     */
    public function setDocuments($documents)
    {
        $this->container['documents'] = $documents;

        return $this;
    }

    /**
     * Gets published_at
     *
     * @return \DateTime|null
     */
    public function getPublishedAt()
    {
        return $this->container['published_at'];
    }

    /**
     * Sets published_at
     *
     * @param \DateTime|null $published_at The _date-time_ the DST has been published
     *
     * @return $this
     */
    public function setPublishedAt($published_at)
    {
        $this->container['published_at'] = $published_at;

        return $this;
    }

    /**
     * Gets expires_at
     *
     * @return \DateTime|null
     */
    public function getExpiresAt()
    {
        return $this->container['expires_at'];
    }

    /**
     * Sets expires_at
     *
     * @param \DateTime|null $expires_at Indicates when the DST will expire
     *
     * @return $this
     */
    public function setExpiresAt($expires_at)
    {
        $this->container['expires_at'] = $expires_at;

        return $this;
    }

    /**
     * Gets resources
     *
     * @return \OpenAPI\Client\Model\LFResource[]|null
     */
    public function getResources()
    {
        return $this->container['resources'];
    }

    /**
     * Sets resources
     *
     * @param \OpenAPI\Client\Model\LFResource[]|null $resources An array of resources attached to the _DST_, each one defined as follows
     *
     * @return $this
     */
    public function setResources($resources)
    {
        $this->container['resources'] = $resources;

        return $this;
    }

    /**
     * Gets signatures
     *
     * @return \OpenAPI\Client\Model\Signature[]|null
     */
    public function getSignatures()
    {
        return $this->container['signatures'];
    }

    /**
     * Sets signatures
     *
     * @param \OpenAPI\Client\Model\Signature[]|null $signatures An array of signatures, each one defined as follows
     *
     * @return $this
     */
    public function setSignatures($signatures)
    {
        $this->container['signatures'] = $signatures;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status Status of the _Digital Signature Transaction_
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets error_message
     *
     * @return string|null
     */
    public function getErrorMessage()
    {
        return $this->container['error_message'];
    }

    /**
     * Sets error_message
     *
     * @param string|null $error_message The explication of the occurred error
     *
     * @return $this
     */
    public function setErrorMessage($error_message)
    {
        $this->container['error_message'] = $error_message;

        return $this;
    }

    /**
     * Gets deleted_at
     *
     * @return \DateTime|null
     */
    public function getDeletedAt()
    {
        return $this->container['deleted_at'];
    }

    /**
     * Sets deleted_at
     *
     * @param \DateTime|null $deleted_at Indicates when the _DST_ has been deleted
     *
     * @return $this
     */
    public function setDeletedAt($deleted_at)
    {
        $this->container['deleted_at'] = $deleted_at;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return string[]|null
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param string[]|null $tags An array of tags for the _DST_. In such way is possible to tag in the same way some _DSTs_ in order to keep them organized and been easy to find them through the custom search
     *
     * @return $this
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets template
     *
     * @return bool|null
     */
    public function getTemplate()
    {
        return $this->container['template'];
    }

    /**
     * Sets template
     *
     * @param bool|null $template Indicates if a template has been used to create the DST or not
     *
     * @return $this
     */
    public function setTemplate($template)
    {
        $this->container['template'] = $template;

        return $this;
    }

    /**
     * Gets public_template
     *
     * @return bool|null
     */
    public function getPublicTemplate()
    {
        return $this->container['public_template'];
    }

    /**
     * Sets public_template
     *
     * @param bool|null $public_template Indicates if a public template has been used to create the DST or not
     *
     * @return $this
     */
    public function setPublicTemplate($public_template)
    {
        $this->container['public_template'] = $public_template;

        return $this;
    }

    /**
     * Gets extra_data
     *
     * @return map[string,object]|null
     */
    public function getExtraData()
    {
        return $this->container['extra_data'];
    }

    /**
     * Sets extra_data
     *
     * @param map[string,object]|null $extra_data Extra information about the _DST_
     *
     * @return $this
     */
    public function setExtraData($extra_data)
    {
        $this->container['extra_data'] = $extra_data;

        return $this;
    }

    /**
     * Gets visible_to
     *
     * @return string[]|null
     */
    public function getVisibleTo()
    {
        return $this->container['visible_to'];
    }

    /**
     * Sets visible_to
     *
     * @param string[]|null $visible_to UUIDs of the users to which the DST is visible
     *
     * @return $this
     */
    public function setVisibleTo($visible_to)
    {
        $this->container['visible_to'] = $visible_to;

        return $this;
    }

    /**
     * Gets cc_groups
     *
     * @return string[]|null
     */
    public function getCcGroups()
    {
        return $this->container['cc_groups'];
    }

    /**
     * Sets cc_groups
     *
     * @param string[]|null $cc_groups Name of groups that are informed about the DST
     *
     * @return $this
     */
    public function setCcGroups($cc_groups)
    {
        $this->container['cc_groups'] = $cc_groups;

        return $this;
    }

    /**
     * Gets cc_users
     *
     * @return string[]|null
     */
    public function getCcUsers()
    {
        return $this->container['cc_users'];
    }

    /**
     * Sets cc_users
     *
     * @param string[]|null $cc_users UUIDs of the users that are informed about the DST
     *
     * @return $this
     */
    public function setCcUsers($cc_users)
    {
        $this->container['cc_users'] = $cc_users;

        return $this;
    }

    /**
     * Gets urgent
     *
     * @return bool|null
     */
    public function getUrgent()
    {
        return $this->container['urgent'];
    }

    /**
     * Sets urgent
     *
     * @param bool|null $urgent True if the DST is flagged as urgent
     *
     * @return $this
     */
    public function setUrgent($urgent)
    {
        $this->container['urgent'] = $urgent;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime|null
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime|null $updated_at Indicates the last update of the DST, such as the performing of a signature
     *
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


