<?php
/**
 * Organization
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Signing Today Web
 *
 * *Signing Today* is the perfect Digital Signature Gateway. Whenever in Your workflow You need to add one or more Digital Signatures to Your document, *Signing Today* is the right choice. You prepare Your documents, *Signing Today* takes care of all the rest: send invitations (`signature tickets`) to signers, collects their signatures, send You back the signed document. Integrating *Signing Today* in Your existing applications is very easy. Just follow these API specifications and get inspired by the many examples presented hereafter.
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.2.3
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Organization Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class Organization implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Organization';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'email_override_folder_path' => 'string',
        'name' => 'string',
        'contact_email' => 'string',
        'contact_phone' => 'string',
        'nation' => 'string',
        'city' => 'string',
        'deleted_at' => '\DateTime',
        'private_settings' => '\OpenAPI\Client\Model\OrganizationPrivateSettings',
        'public_settings' => '\OpenAPI\Client\Model\OrganizationPublicSettings',
        'settings' => '\OpenAPI\Client\Model\OrganizationSettings'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'id' => null,
        'email_override_folder_path' => null,
        'name' => null,
        'contact_email' => null,
        'contact_phone' => null,
        'nation' => null,
        'city' => null,
        'deleted_at' => 'date-time',
        'private_settings' => null,
        'public_settings' => null,
        'settings' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'email_override_folder_path' => 'emailOverrideFolderPath',
        'name' => 'name',
        'contact_email' => 'contactEmail',
        'contact_phone' => 'contactPhone',
        'nation' => 'nation',
        'city' => 'city',
        'deleted_at' => 'deletedAt',
        'private_settings' => 'privateSettings',
        'public_settings' => 'publicSettings',
        'settings' => 'settings'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'email_override_folder_path' => 'setEmailOverrideFolderPath',
        'name' => 'setName',
        'contact_email' => 'setContactEmail',
        'contact_phone' => 'setContactPhone',
        'nation' => 'setNation',
        'city' => 'setCity',
        'deleted_at' => 'setDeletedAt',
        'private_settings' => 'setPrivateSettings',
        'public_settings' => 'setPublicSettings',
        'settings' => 'setSettings'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'email_override_folder_path' => 'getEmailOverrideFolderPath',
        'name' => 'getName',
        'contact_email' => 'getContactEmail',
        'contact_phone' => 'getContactPhone',
        'nation' => 'getNation',
        'city' => 'getCity',
        'deleted_at' => 'getDeletedAt',
        'private_settings' => 'getPrivateSettings',
        'public_settings' => 'getPublicSettings',
        'settings' => 'getSettings'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['email_override_folder_path'] = isset($data['email_override_folder_path']) ? $data['email_override_folder_path'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['contact_email'] = isset($data['contact_email']) ? $data['contact_email'] : null;
        $this->container['contact_phone'] = isset($data['contact_phone']) ? $data['contact_phone'] : null;
        $this->container['nation'] = isset($data['nation']) ? $data['nation'] : null;
        $this->container['city'] = isset($data['city']) ? $data['city'] : null;
        $this->container['deleted_at'] = isset($data['deleted_at']) ? $data['deleted_at'] : null;
        $this->container['private_settings'] = isset($data['private_settings']) ? $data['private_settings'] : null;
        $this->container['public_settings'] = isset($data['public_settings']) ? $data['public_settings'] : null;
        $this->container['settings'] = isset($data['settings']) ? $data['settings'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets email_override_folder_path
     *
     * @return string|null
     */
    public function getEmailOverrideFolderPath()
    {
        return $this->container['email_override_folder_path'];
    }

    /**
     * Sets email_override_folder_path
     *
     * @param string|null $email_override_folder_path email_override_folder_path
     *
     * @return $this
     */
    public function setEmailOverrideFolderPath($email_override_folder_path)
    {
        $this->container['email_override_folder_path'] = $email_override_folder_path;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets contact_email
     *
     * @return string|null
     */
    public function getContactEmail()
    {
        return $this->container['contact_email'];
    }

    /**
     * Sets contact_email
     *
     * @param string|null $contact_email contact_email
     *
     * @return $this
     */
    public function setContactEmail($contact_email)
    {
        $this->container['contact_email'] = $contact_email;

        return $this;
    }

    /**
     * Gets contact_phone
     *
     * @return string|null
     */
    public function getContactPhone()
    {
        return $this->container['contact_phone'];
    }

    /**
     * Sets contact_phone
     *
     * @param string|null $contact_phone contact_phone
     *
     * @return $this
     */
    public function setContactPhone($contact_phone)
    {
        $this->container['contact_phone'] = $contact_phone;

        return $this;
    }

    /**
     * Gets nation
     *
     * @return string|null
     */
    public function getNation()
    {
        return $this->container['nation'];
    }

    /**
     * Sets nation
     *
     * @param string|null $nation nation
     *
     * @return $this
     */
    public function setNation($nation)
    {
        $this->container['nation'] = $nation;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string|null
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string|null $city city
     *
     * @return $this
     */
    public function setCity($city)
    {
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets deleted_at
     *
     * @return \DateTime|null
     */
    public function getDeletedAt()
    {
        return $this->container['deleted_at'];
    }

    /**
     * Sets deleted_at
     *
     * @param \DateTime|null $deleted_at deleted_at
     *
     * @return $this
     */
    public function setDeletedAt($deleted_at)
    {
        $this->container['deleted_at'] = $deleted_at;

        return $this;
    }

    /**
     * Gets private_settings
     *
     * @return \OpenAPI\Client\Model\OrganizationPrivateSettings|null
     */
    public function getPrivateSettings()
    {
        return $this->container['private_settings'];
    }

    /**
     * Sets private_settings
     *
     * @param \OpenAPI\Client\Model\OrganizationPrivateSettings|null $private_settings private_settings
     *
     * @return $this
     */
    public function setPrivateSettings($private_settings)
    {
        $this->container['private_settings'] = $private_settings;

        return $this;
    }

    /**
     * Gets public_settings
     *
     * @return \OpenAPI\Client\Model\OrganizationPublicSettings|null
     */
    public function getPublicSettings()
    {
        return $this->container['public_settings'];
    }

    /**
     * Sets public_settings
     *
     * @param \OpenAPI\Client\Model\OrganizationPublicSettings|null $public_settings public_settings
     *
     * @return $this
     */
    public function setPublicSettings($public_settings)
    {
        $this->container['public_settings'] = $public_settings;

        return $this;
    }

    /**
     * Gets settings
     *
     * @return \OpenAPI\Client\Model\OrganizationSettings|null
     */
    public function getSettings()
    {
        return $this->container['settings'];
    }

    /**
     * Sets settings
     *
     * @param \OpenAPI\Client\Model\OrganizationSettings|null $settings settings
     *
     * @return $this
     */
    public function setSettings($settings)
    {
        $this->container['settings'] = $settings;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


