<?php
/**
 * Identity
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Signing Today Web
 *
 * *Signing Today* is the perfect Digital Signature Gateway. Whenever in Your workflow You need to add one or more Digital Signatures to Your document, *Signing Today* is the right choice. You prepare Your documents, *Signing Today* takes care of all the rest: send invitations (`signature tickets`) to signers, collects their signatures, send You back the signed document. Integrating *Signing Today* in Your existing applications is very easy. Just follow these API specifications and get inspired by the many examples presented hereafter.
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.2.3
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Identity Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class Identity implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Identity';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'actions' => 'map[string,string]',
        'provider' => 'string',
        'label' => 'string',
        'provider_type' => 'string',
        'subject_common_name' => 'string',
        'issuer_common_name' => 'string',
        'expire_date' => '\DateTime',
        'raw_certificate' => 'string',
        'appearance' => '\OpenAPI\Client\Model\LFResource',
        'provider_data' => '\OpenAPI\Client\Model\IdentityProviderData',
        'valid' => 'bool',
        'tags' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'id' => 'uuid',
        'actions' => null,
        'provider' => null,
        'label' => null,
        'provider_type' => null,
        'subject_common_name' => null,
        'issuer_common_name' => null,
        'expire_date' => 'date-time',
        'raw_certificate' => null,
        'appearance' => null,
        'provider_data' => null,
        'valid' => null,
        'tags' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'actions' => 'actions',
        'provider' => 'provider',
        'label' => 'label',
        'provider_type' => 'providerType',
        'subject_common_name' => 'subjectCommonName',
        'issuer_common_name' => 'issuerCommonName',
        'expire_date' => 'expireDate',
        'raw_certificate' => 'rawCertificate',
        'appearance' => 'appearance',
        'provider_data' => 'providerData',
        'valid' => 'valid',
        'tags' => 'tags'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'actions' => 'setActions',
        'provider' => 'setProvider',
        'label' => 'setLabel',
        'provider_type' => 'setProviderType',
        'subject_common_name' => 'setSubjectCommonName',
        'issuer_common_name' => 'setIssuerCommonName',
        'expire_date' => 'setExpireDate',
        'raw_certificate' => 'setRawCertificate',
        'appearance' => 'setAppearance',
        'provider_data' => 'setProviderData',
        'valid' => 'setValid',
        'tags' => 'setTags'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'actions' => 'getActions',
        'provider' => 'getProvider',
        'label' => 'getLabel',
        'provider_type' => 'getProviderType',
        'subject_common_name' => 'getSubjectCommonName',
        'issuer_common_name' => 'getIssuerCommonName',
        'expire_date' => 'getExpireDate',
        'raw_certificate' => 'getRawCertificate',
        'appearance' => 'getAppearance',
        'provider_data' => 'getProviderData',
        'valid' => 'getValid',
        'tags' => 'getTags'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['actions'] = isset($data['actions']) ? $data['actions'] : null;
        $this->container['provider'] = isset($data['provider']) ? $data['provider'] : null;
        $this->container['label'] = isset($data['label']) ? $data['label'] : null;
        $this->container['provider_type'] = isset($data['provider_type']) ? $data['provider_type'] : null;
        $this->container['subject_common_name'] = isset($data['subject_common_name']) ? $data['subject_common_name'] : null;
        $this->container['issuer_common_name'] = isset($data['issuer_common_name']) ? $data['issuer_common_name'] : null;
        $this->container['expire_date'] = isset($data['expire_date']) ? $data['expire_date'] : null;
        $this->container['raw_certificate'] = isset($data['raw_certificate']) ? $data['raw_certificate'] : null;
        $this->container['appearance'] = isset($data['appearance']) ? $data['appearance'] : null;
        $this->container['provider_data'] = isset($data['provider_data']) ? $data['provider_data'] : null;
        $this->container['valid'] = isset($data['valid']) ? $data['valid'] : null;
        $this->container['tags'] = isset($data['tags']) ? $data['tags'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets actions
     *
     * @return map[string,string]|null
     */
    public function getActions()
    {
        return $this->container['actions'];
    }

    /**
     * Sets actions
     *
     * @param map[string,string]|null $actions actions
     *
     * @return $this
     */
    public function setActions($actions)
    {
        $this->container['actions'] = $actions;

        return $this;
    }

    /**
     * Gets provider
     *
     * @return string|null
     */
    public function getProvider()
    {
        return $this->container['provider'];
    }

    /**
     * Sets provider
     *
     * @param string|null $provider provider
     *
     * @return $this
     */
    public function setProvider($provider)
    {
        $this->container['provider'] = $provider;

        return $this;
    }

    /**
     * Gets label
     *
     * @return string|null
     */
    public function getLabel()
    {
        return $this->container['label'];
    }

    /**
     * Sets label
     *
     * @param string|null $label label
     *
     * @return $this
     */
    public function setLabel($label)
    {
        $this->container['label'] = $label;

        return $this;
    }

    /**
     * Gets provider_type
     *
     * @return string|null
     */
    public function getProviderType()
    {
        return $this->container['provider_type'];
    }

    /**
     * Sets provider_type
     *
     * @param string|null $provider_type provider_type
     *
     * @return $this
     */
    public function setProviderType($provider_type)
    {
        $this->container['provider_type'] = $provider_type;

        return $this;
    }

    /**
     * Gets subject_common_name
     *
     * @return string|null
     */
    public function getSubjectCommonName()
    {
        return $this->container['subject_common_name'];
    }

    /**
     * Sets subject_common_name
     *
     * @param string|null $subject_common_name subject_common_name
     *
     * @return $this
     */
    public function setSubjectCommonName($subject_common_name)
    {
        $this->container['subject_common_name'] = $subject_common_name;

        return $this;
    }

    /**
     * Gets issuer_common_name
     *
     * @return string|null
     */
    public function getIssuerCommonName()
    {
        return $this->container['issuer_common_name'];
    }

    /**
     * Sets issuer_common_name
     *
     * @param string|null $issuer_common_name issuer_common_name
     *
     * @return $this
     */
    public function setIssuerCommonName($issuer_common_name)
    {
        $this->container['issuer_common_name'] = $issuer_common_name;

        return $this;
    }

    /**
     * Gets expire_date
     *
     * @return \DateTime|null
     */
    public function getExpireDate()
    {
        return $this->container['expire_date'];
    }

    /**
     * Sets expire_date
     *
     * @param \DateTime|null $expire_date expire_date
     *
     * @return $this
     */
    public function setExpireDate($expire_date)
    {
        $this->container['expire_date'] = $expire_date;

        return $this;
    }

    /**
     * Gets raw_certificate
     *
     * @return string|null
     */
    public function getRawCertificate()
    {
        return $this->container['raw_certificate'];
    }

    /**
     * Sets raw_certificate
     *
     * @param string|null $raw_certificate raw_certificate
     *
     * @return $this
     */
    public function setRawCertificate($raw_certificate)
    {
        $this->container['raw_certificate'] = $raw_certificate;

        return $this;
    }

    /**
     * Gets appearance
     *
     * @return \OpenAPI\Client\Model\LFResource|null
     */
    public function getAppearance()
    {
        return $this->container['appearance'];
    }

    /**
     * Sets appearance
     *
     * @param \OpenAPI\Client\Model\LFResource|null $appearance appearance
     *
     * @return $this
     */
    public function setAppearance($appearance)
    {
        $this->container['appearance'] = $appearance;

        return $this;
    }

    /**
     * Gets provider_data
     *
     * @return \OpenAPI\Client\Model\IdentityProviderData|null
     */
    public function getProviderData()
    {
        return $this->container['provider_data'];
    }

    /**
     * Sets provider_data
     *
     * @param \OpenAPI\Client\Model\IdentityProviderData|null $provider_data provider_data
     *
     * @return $this
     */
    public function setProviderData($provider_data)
    {
        $this->container['provider_data'] = $provider_data;

        return $this;
    }

    /**
     * Gets valid
     *
     * @return bool|null
     */
    public function getValid()
    {
        return $this->container['valid'];
    }

    /**
     * Sets valid
     *
     * @param bool|null $valid valid
     *
     * @return $this
     */
    public function setValid($valid)
    {
        $this->container['valid'] = $valid;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return string[]|null
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param string[]|null $tags tags
     *
     * @return $this
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


