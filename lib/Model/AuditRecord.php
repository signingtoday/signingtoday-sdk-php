<?php
/**
 * AuditRecord
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Signing Today Web
 *
 * *Signing Today* is the perfect Digital Signature Gateway. Whenever in Your workflow You need to add one or more Digital Signatures to Your document, *Signing Today* is the right choice. You prepare Your documents, *Signing Today* takes care of all the rest: send invitations (`signature tickets`) to signers, collects their signatures, send You back the signed document. Integrating *Signing Today* in Your existing applications is very easy. Just follow these API specifications and get inspired by the many examples presented hereafter.
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.2.3
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * AuditRecord Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class AuditRecord implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AuditRecord';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        '_instance_id' => 'int',
        'at' => '\DateTime',
        'event' => 'string',
        'signer' => '\OpenAPI\Client\Model\SignerRecord',
        'value' => 'string',
        'dst_id' => 'string',
        'document_id' => 'int',
        'fillable_form_id' => 'int',
        'signature_request_id' => 'int',
        'note_id' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        '_instance_id' => 'int64',
        'at' => 'date-time',
        'event' => null,
        'signer' => null,
        'value' => null,
        'dst_id' => 'uuid',
        'document_id' => 'int32',
        'fillable_form_id' => 'int32',
        'signature_request_id' => 'int32',
        'note_id' => 'int64'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        '_instance_id' => '_instance_id',
        'at' => 'at',
        'event' => 'event',
        'signer' => 'signer',
        'value' => 'value',
        'dst_id' => 'dstId',
        'document_id' => 'documentId',
        'fillable_form_id' => 'fillableFormId',
        'signature_request_id' => 'signatureRequestId',
        'note_id' => 'noteId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        '_instance_id' => 'setInstanceId',
        'at' => 'setAt',
        'event' => 'setEvent',
        'signer' => 'setSigner',
        'value' => 'setValue',
        'dst_id' => 'setDstId',
        'document_id' => 'setDocumentId',
        'fillable_form_id' => 'setFillableFormId',
        'signature_request_id' => 'setSignatureRequestId',
        'note_id' => 'setNoteId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        '_instance_id' => 'getInstanceId',
        'at' => 'getAt',
        'event' => 'getEvent',
        'signer' => 'getSigner',
        'value' => 'getValue',
        'dst_id' => 'getDstId',
        'document_id' => 'getDocumentId',
        'fillable_form_id' => 'getFillableFormId',
        'signature_request_id' => 'getSignatureRequestId',
        'note_id' => 'getNoteId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const EVENT_EVENT_PUBLISHED = 'event_published';
    const EVENT_EVENT_FORM_FILL = 'event_form_fill';
    const EVENT_EVENT_SIGNATURE = 'event_signature';
    const EVENT_EVENT_REJECTION = 'event_rejection';
    const EVENT_EVENT_REPLACEMENT = 'event_replacement';
    const EVENT_EVENT_NOTE_ADD = 'event_note_add';
    const EVENT_EVENT_NOTE_MODIFY = 'event_note_modify';
    const EVENT_EVENT_NOTE_DELETE = 'event_note_delete';
    const EVENT_EVENT_SOLICITATION = 'event_solicitation';
    const EVENT_STAGE_TO_FILL = 'stage_to_fill';
    const EVENT_STAGE_TO_SIGN = 'stage_to_sign';
    const EVENT_STAGE_EXPIRED = 'stage_expired';
    const EVENT_STAGE_SIGNED = 'stage_signed';
    const EVENT_STAGE_REJECTED = 'stage_rejected';
    const EVENT_EVENT_UPLOAD_ALFRESCO = 'event_upload_alfresco';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEventAllowableValues()
    {
        return [
            self::EVENT_EVENT_PUBLISHED,
            self::EVENT_EVENT_FORM_FILL,
            self::EVENT_EVENT_SIGNATURE,
            self::EVENT_EVENT_REJECTION,
            self::EVENT_EVENT_REPLACEMENT,
            self::EVENT_EVENT_NOTE_ADD,
            self::EVENT_EVENT_NOTE_MODIFY,
            self::EVENT_EVENT_NOTE_DELETE,
            self::EVENT_EVENT_SOLICITATION,
            self::EVENT_STAGE_TO_FILL,
            self::EVENT_STAGE_TO_SIGN,
            self::EVENT_STAGE_EXPIRED,
            self::EVENT_STAGE_SIGNED,
            self::EVENT_STAGE_REJECTED,
            self::EVENT_EVENT_UPLOAD_ALFRESCO,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['_instance_id'] = isset($data['_instance_id']) ? $data['_instance_id'] : null;
        $this->container['at'] = isset($data['at']) ? $data['at'] : null;
        $this->container['event'] = isset($data['event']) ? $data['event'] : null;
        $this->container['signer'] = isset($data['signer']) ? $data['signer'] : null;
        $this->container['value'] = isset($data['value']) ? $data['value'] : null;
        $this->container['dst_id'] = isset($data['dst_id']) ? $data['dst_id'] : null;
        $this->container['document_id'] = isset($data['document_id']) ? $data['document_id'] : null;
        $this->container['fillable_form_id'] = isset($data['fillable_form_id']) ? $data['fillable_form_id'] : null;
        $this->container['signature_request_id'] = isset($data['signature_request_id']) ? $data['signature_request_id'] : null;
        $this->container['note_id'] = isset($data['note_id']) ? $data['note_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getEventAllowableValues();
        if (!is_null($this->container['event']) && !in_array($this->container['event'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'event', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets _instance_id
     *
     * @return int|null
     */
    public function getInstanceId()
    {
        return $this->container['_instance_id'];
    }

    /**
     * Sets _instance_id
     *
     * @param int|null $_instance_id It is a reference for internal use
     *
     * @return $this
     */
    public function setInstanceId($_instance_id)
    {
        $this->container['_instance_id'] = $_instance_id;

        return $this;
    }

    /**
     * Gets at
     *
     * @return \DateTime|null
     */
    public function getAt()
    {
        return $this->container['at'];
    }

    /**
     * Sets at
     *
     * @param \DateTime|null $at at
     *
     * @return $this
     */
    public function setAt($at)
    {
        $this->container['at'] = $at;

        return $this;
    }

    /**
     * Gets event
     *
     * @return string|null
     */
    public function getEvent()
    {
        return $this->container['event'];
    }

    /**
     * Sets event
     *
     * @param string|null $event event
     *
     * @return $this
     */
    public function setEvent($event)
    {
        $allowedValues = $this->getEventAllowableValues();
        if (!is_null($event) && !in_array($event, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'event', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['event'] = $event;

        return $this;
    }

    /**
     * Gets signer
     *
     * @return \OpenAPI\Client\Model\SignerRecord|null
     */
    public function getSigner()
    {
        return $this->container['signer'];
    }

    /**
     * Sets signer
     *
     * @param \OpenAPI\Client\Model\SignerRecord|null $signer signer
     *
     * @return $this
     */
    public function setSigner($signer)
    {
        $this->container['signer'] = $signer;

        return $this;
    }

    /**
     * Gets value
     *
     * @return string|null
     */
    public function getValue()
    {
        return $this->container['value'];
    }

    /**
     * Sets value
     *
     * @param string|null $value value
     *
     * @return $this
     */
    public function setValue($value)
    {
        $this->container['value'] = $value;

        return $this;
    }

    /**
     * Gets dst_id
     *
     * @return string|null
     */
    public function getDstId()
    {
        return $this->container['dst_id'];
    }

    /**
     * Sets dst_id
     *
     * @param string|null $dst_id dst_id
     *
     * @return $this
     */
    public function setDstId($dst_id)
    {
        $this->container['dst_id'] = $dst_id;

        return $this;
    }

    /**
     * Gets document_id
     *
     * @return int|null
     */
    public function getDocumentId()
    {
        return $this->container['document_id'];
    }

    /**
     * Sets document_id
     *
     * @param int|null $document_id document_id
     *
     * @return $this
     */
    public function setDocumentId($document_id)
    {
        $this->container['document_id'] = $document_id;

        return $this;
    }

    /**
     * Gets fillable_form_id
     *
     * @return int|null
     */
    public function getFillableFormId()
    {
        return $this->container['fillable_form_id'];
    }

    /**
     * Sets fillable_form_id
     *
     * @param int|null $fillable_form_id fillable_form_id
     *
     * @return $this
     */
    public function setFillableFormId($fillable_form_id)
    {
        $this->container['fillable_form_id'] = $fillable_form_id;

        return $this;
    }

    /**
     * Gets signature_request_id
     *
     * @return int|null
     */
    public function getSignatureRequestId()
    {
        return $this->container['signature_request_id'];
    }

    /**
     * Sets signature_request_id
     *
     * @param int|null $signature_request_id signature_request_id
     *
     * @return $this
     */
    public function setSignatureRequestId($signature_request_id)
    {
        $this->container['signature_request_id'] = $signature_request_id;

        return $this;
    }

    /**
     * Gets note_id
     *
     * @return int|null
     */
    public function getNoteId()
    {
        return $this->container['note_id'];
    }

    /**
     * Sets note_id
     *
     * @param int|null $note_id note_id
     *
     * @return $this
     */
    public function setNoteId($note_id)
    {
        $this->container['note_id'] = $note_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


