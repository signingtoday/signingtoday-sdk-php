<?php
/**
 * Document
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Signing Today Web
 *
 * *Signing Today* is the perfect Digital Signature Gateway. Whenever in Your workflow You need to add one or more Digital Signatures to Your document, *Signing Today* is the right choice. You prepare Your documents, *Signing Today* takes care of all the rest: send invitations (`signature tickets`) to signers, collects their signatures, send You back the signed document. Integrating *Signing Today* in Your existing applications is very easy. Just follow these API specifications and get inspired by the many examples presented hereafter.
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.2.3
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Document Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class Document implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Document';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        '_instance_id' => 'int',
        'id' => 'int',
        'plain_document_uuid' => 'string',
        'filled_document_uuid' => 'string',
        'signed_document_uuid' => 'string',
        'status' => 'string',
        'forms' => '\OpenAPI\Client\Model\FillableForm[]',
        'signature_requests' => '\OpenAPI\Client\Model\SignatureRequest[]',
        'signer_groups' => '\OpenAPI\Client\Model\SignersGroup[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        '_instance_id' => 'int64',
        'id' => 'int32',
        'plain_document_uuid' => 'uuid',
        'filled_document_uuid' => 'uuid',
        'signed_document_uuid' => 'uuid',
        'status' => 'any',
        'forms' => null,
        'signature_requests' => null,
        'signer_groups' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        '_instance_id' => '_instance_id',
        'id' => 'id',
        'plain_document_uuid' => 'plainDocumentUuid',
        'filled_document_uuid' => 'filledDocumentUuid',
        'signed_document_uuid' => 'signedDocumentUuid',
        'status' => 'status',
        'forms' => 'forms',
        'signature_requests' => 'signatureRequests',
        'signer_groups' => 'signerGroups'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        '_instance_id' => 'setInstanceId',
        'id' => 'setId',
        'plain_document_uuid' => 'setPlainDocumentUuid',
        'filled_document_uuid' => 'setFilledDocumentUuid',
        'signed_document_uuid' => 'setSignedDocumentUuid',
        'status' => 'setStatus',
        'forms' => 'setForms',
        'signature_requests' => 'setSignatureRequests',
        'signer_groups' => 'setSignerGroups'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        '_instance_id' => 'getInstanceId',
        'id' => 'getId',
        'plain_document_uuid' => 'getPlainDocumentUuid',
        'filled_document_uuid' => 'getFilledDocumentUuid',
        'signed_document_uuid' => 'getSignedDocumentUuid',
        'status' => 'getStatus',
        'forms' => 'getForms',
        'signature_requests' => 'getSignatureRequests',
        'signer_groups' => 'getSignerGroups'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const STATUS_PLAIN = 'plain';
    const STATUS_FILLED = 'filled';
    const STATUS_SIGNED = 'signed';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_PLAIN,
            self::STATUS_FILLED,
            self::STATUS_SIGNED,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['_instance_id'] = isset($data['_instance_id']) ? $data['_instance_id'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['plain_document_uuid'] = isset($data['plain_document_uuid']) ? $data['plain_document_uuid'] : null;
        $this->container['filled_document_uuid'] = isset($data['filled_document_uuid']) ? $data['filled_document_uuid'] : null;
        $this->container['signed_document_uuid'] = isset($data['signed_document_uuid']) ? $data['signed_document_uuid'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['forms'] = isset($data['forms']) ? $data['forms'] : null;
        $this->container['signature_requests'] = isset($data['signature_requests']) ? $data['signature_requests'] : null;
        $this->container['signer_groups'] = isset($data['signer_groups']) ? $data['signer_groups'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets _instance_id
     *
     * @return int|null
     */
    public function getInstanceId()
    {
        return $this->container['_instance_id'];
    }

    /**
     * Sets _instance_id
     *
     * @param int|null $_instance_id It is a reference for internal use
     *
     * @return $this
     */
    public function setInstanceId($_instance_id)
    {
        $this->container['_instance_id'] = $_instance_id;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id Unique Id of the document
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets plain_document_uuid
     *
     * @return string|null
     */
    public function getPlainDocumentUuid()
    {
        return $this->container['plain_document_uuid'];
    }

    /**
     * Sets plain_document_uuid
     *
     * @param string|null $plain_document_uuid Id of the associated Resource (plain PDF file e.g. the one uploaded by the user)
     *
     * @return $this
     */
    public function setPlainDocumentUuid($plain_document_uuid)
    {
        $this->container['plain_document_uuid'] = $plain_document_uuid;

        return $this;
    }

    /**
     * Gets filled_document_uuid
     *
     * @return string|null
     */
    public function getFilledDocumentUuid()
    {
        return $this->container['filled_document_uuid'];
    }

    /**
     * Sets filled_document_uuid
     *
     * @param string|null $filled_document_uuid Id of the associated PDF file that contains all the forms filled (present only once the whole document has been filled)
     *
     * @return $this
     */
    public function setFilledDocumentUuid($filled_document_uuid)
    {
        $this->container['filled_document_uuid'] = $filled_document_uuid;

        return $this;
    }

    /**
     * Gets signed_document_uuid
     *
     * @return string|null
     */
    public function getSignedDocumentUuid()
    {
        return $this->container['signed_document_uuid'];
    }

    /**
     * Sets signed_document_uuid
     *
     * @param string|null $signed_document_uuid Id of the associated PDF file that contains all the signatures  (present only once the whole document has been signed)
     *
     * @return $this
     */
    public function setSignedDocumentUuid($signed_document_uuid)
    {
        $this->container['signed_document_uuid'] = $signed_document_uuid;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status The status of the _Document_, which can be: - \"plain\": The document has been correctly updated by the user - \"filled\": The document has been filled - \"signed\": The document has been signed
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets forms
     *
     * @return \OpenAPI\Client\Model\FillableForm[]|null
     */
    public function getForms()
    {
        return $this->container['forms'];
    }

    /**
     * Sets forms
     *
     * @param \OpenAPI\Client\Model\FillableForm[]|null $forms The fillable elements of the document. Use the type field to identify textual fillable fields and signature fields
     *
     * @return $this
     */
    public function setForms($forms)
    {
        $this->container['forms'] = $forms;

        return $this;
    }

    /**
     * Gets signature_requests
     *
     * @return \OpenAPI\Client\Model\SignatureRequest[]|null
     */
    public function getSignatureRequests()
    {
        return $this->container['signature_requests'];
    }

    /**
     * Sets signature_requests
     *
     * @param \OpenAPI\Client\Model\SignatureRequest[]|null $signature_requests The list of signature request of the document
     *
     * @return $this
     */
    public function setSignatureRequests($signature_requests)
    {
        $this->container['signature_requests'] = $signature_requests;

        return $this;
    }

    /**
     * Gets signer_groups
     *
     * @return \OpenAPI\Client\Model\SignersGroup[]|null
     */
    public function getSignerGroups()
    {
        return $this->container['signer_groups'];
    }

    /**
     * Sets signer_groups
     *
     * @param \OpenAPI\Client\Model\SignersGroup[]|null $signer_groups The sign plan for the document
     *
     * @return $this
     */
    public function setSignerGroups($signer_groups)
    {
        $this->container['signer_groups'] = $signer_groups;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


